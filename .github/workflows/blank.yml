#include<iostream>
using namespace std;

const double pi = 3.14;

// 设计一个圆类，求圆的周长
// 公式：2*pi*半径 

//class 代表设计一个类，类后面紧跟的就是类的名称
 
class Circle
{
	//访问权限
public:

//属性
//半径
	int m_r;

//行为
//获取圆的周长(函数)

	double claculateZC()
	{
		return 2 * pi * m_r;
	}

};


int main()
{
	//通过圆类，创建具体的圆（对象）
	Circle c1;
	//给圆的对象 属性进行赋值
	c1.m_r = 10;
	cout << "圆的周长为：" << c1.claculateZC() << endl;


	system("pause");
	return 0;

}


实例
#include<iostream>
using namespace std;
#include<string>


class student 
{
public:

//属性
	string  m_Name;//姓名
	int m_Id;//学号

	//行为
	//显示学号姓名
	void showStudent()
	{
		cout << "姓名：" << m_Name <<  "学号：" << m_Id << endl;
	
	}
};

int main()
{
	//创建具体学生
	student s1;
	s1.m_Name = "张三";
	s1.m_Id = 1911518899;
	s1.showStudent();

	system("pause");
	return 0;

}


权限

#include<iostream>
using namespace std;
#include<string>

//访问权限
//公共权限 public  成员 类内可以访问 类外可以访问

//保护权限 protected  成员 类内可以访问 类外不可以访问

//私有权限 private  成员 类内可以访问 类外不可以访问

class Person 
{
public:

//属性
	string  m_Name;//姓名
protected:
	string m_car;

private:
	int m_password;


public:
	void func()
	{
		m_Name = "张三";
		m_car = "拖拉机";
		m_password = 123456;
	}
};

int main()
{
	//创建具体学生
	Person p1;
	
	p1.m_Name = "李四";

	system("pause");
	return 0;

}


权限条件

#include<iostream>
using namespace std;
#include<string>

//成员属性设置私有
//1.可以控制读写的权限
//2.对于写可以检测数据的有效性
class Person 
{
public:
	//设置姓名
	void setName(string name)
	{
		m_Name = name;
	}
	//获取姓名
	string getName()
	{
		return m_Name;
	}

	//获取年龄
	int getAge()
	{
		return m_Age;
	}
	//设置年龄
	void setAge(int age)
	{
		if (age < 0 || age>150)
		{
			cout << "年龄输入有误，赋值失败" << endl;
			return;
		}
		m_Age = age;
	}

//设置偶像
	void setIdol(string idol)
	{
		m_Idol = idol;
	
	}
private:
//属性
	string  m_Name;//姓名 可读可写
	int m_Age=18; //年龄 只读
	string m_Idol; //偶像 只写
};
int main()
{
	Person p; 
	p.setName("张三");
	cout << "姓名：" << p.getName() << endl;
	//年龄
	p.setAge(160);
	cout << "年龄：" << p.getAge() << endl;
	//偶像设置
	p.setIdol("kunkun");//只写 外界访问不到

	system("pause");
	return 0;

}



实例


#include<iostream>
using namespace std;
#include<string>
 
//立方体的设计
//1.创建立方体类
//2.设计属性和行为
class Cube
{

public:
	//设置长
	void setL(int l)
	{
		m_L = l;
	}
	//获取长
	int getL()
	{
		return m_L;
	}
	//设置宽
	 void setW(int w)
	{
		m_W = w;
	}
	//获取宽
	 int getW()
	{
		return m_W;
	}
	//设置高
	 void setH(int h)
	{
		m_H = h;
	}
	//获取高
	 int getH()
	 {
		 return m_H;
	 }
	 //获取立方体面积
 int calculateS()
	 {
		 return 2 * m_L * m_H + 2 * m_L * m_W + 2 * m_H * m_H;
	 }
 int calculateV()
 {
	 return m_L * m_H * m_W;
 }

private:
	int m_L;
	int m_W;
	int m_H;

};

//利用全局函数判断， 两个立方体是否相等
bool isSame(Cube& c1, Cube& c2)//判断真假用bool型
{
	if (c1.getH() == c2.getH() && c1.getL() == c2.getL() && c1.getW() == c2.getW())
	{
		return true;
	}
	return false;

}

int main()
{
	//创建立方体c1对象
	Cube c1;
	c1.setL(10);
	c1.setH(10);
	c1.setW(10);

	cout << "c1的面积为：" << c1.calculateS() << endl;
	cout << "c1的体积为：" << c1.calculateV() << endl;

//创建立方c2
	Cube c2;
	c2.setL(10);
	c2.setH(10);
	c2.setW(10);


	bool ret = isSame(c1, c2);
if (ret)
{
	cout << "c1和c2x相等的" << endl;

}
else
{  
	cout << "不相等" << endl;
}

	system("pause");
	return 0;

}
